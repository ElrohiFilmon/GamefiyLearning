
import type { LucideIcon } from 'lucide-react';

export interface UserProfile {
  id: string;
  name: string;
  email: string;
  avatarUrl?: string;
  initials?: string;
  xp: number;
  points: number;
  streaks: number;
  badges: UserBadge[];
  completedCourseIds: string[];
  completedChallengeIds?: string[]; // Added this
  skillPoints: Record<string, SkillDetail>; // e.g., { "Go Basics": { level: 5, points: 500 } }
  bio?: string;
  joinedDate: string;
  certificatesEarned: Array<{
    courseId: string;
    courseName: string;
    earnedDate: string;
    transactionId?: string; // For payment reference
    certificateUrl?: string; // Link to the viewable/downloadable certificate
  }>;
  subscriptionStatus: 'active' | 'inactive' | 'pending_payment';
  subscriptionEndDate?: string;
}

export interface SkillDetail {
  level: number;
  points: number;
  name: string;
}

export interface Course {
  id: string;
  title: string;
  description: string;
  longDescription?: string;
  imageUrl: string;
  modules: Module[];
  estimatedTime: string; // e.g., "10 hours"
  difficulty: 'Beginner' | 'Intermediate' | 'Advanced';
  badgeOnCompletionId?: string;
  tags: string[];
  certificateFee?: number; // Optional: fee for the certificate in ETB
}

export interface UserCourseProgress extends Course {
  userProgress: number; // 0-100
  isCompleted: boolean;
  currentLessonId?: string;
}

export interface Module {
  id: string;
  title: string;
  description?: string;
  lessons: Lesson[];
  order: number;
}

export interface UserModuleProgress extends Module {
  isCompleted: boolean;
  userProgress: number; // 0-100
}

export interface Lesson {
  id: string;
  title: string;
  type: 'video' | 'text' | 'quiz' | 'interactive_code';
  content: string; // For text/video URL. For quiz/interactive, might be JSON string or structured object
  xpValue: number;
  estimatedTime: string; // e.g. "30 minutes"
  order: number;
}

export interface UserLessonProgress extends Lesson {
  isCompleted: boolean;
  score?: number; // For quizzes
}

export interface Badge {
  id: string;
  name: string;
  description: string;
  icon: LucideIcon | string; // LucideIcon component or URL string for custom SVG/image
  type: 'completion' | 'skill' | 'graded' | 'hidden' | 'streak' | 'quest';
  grade?: 'bronze' | 'silver' | 'gold'; // For graded badges
  criteria: string; // Textual description of how to earn
}

export interface UserBadge extends Badge {
  earnedDate: string;
}

export interface Challenge {
  id: string;
  title: string;
  description: string;
  xpBonus: number;
  badgeBonusId?: string;
  type: 'daily' | 'weekly' | 'special' | 'quest_step';
  relatedSkills?: string[]; // Skills this challenge helps improve
  difficulty: 'Easy' | 'Medium' | 'Hard';
}

export interface UserChallengeProgress extends Challenge {
  isCompleted: boolean;
  progress?: number; // For multi-step challenges
  completedDate?: string;
}

export interface LearningPath {
  id: string;
  title: string;
  description: string;
  imageUrl?: string;
  nodes: LearningPathNode[];
}

export interface LearningPathNode {
  id: string; // Unique ID for this node in the path
  label: string;
  type: 'course' | 'module' | 'topic_group' | 'custom_challenge';
  resourceId?: string; // e.g., courseId or moduleId
  description?: string;
  isUnlocked: boolean; // Based on completing previous nodes
  // position: { x: number; y: number }; // For visual layout (if using a graph library)
  childrenNodeIds?: string[]; // For tree-like structures
  parentId?: string;
}

export interface UserLearningPathProgress extends LearningPath {
  completedNodeIds: string[];
  userProgress: number; // 0-100 overall path progress
}

export interface LeaderboardEntry {
  userId: string;
  userName: string;
  userAvatarUrl?: string;
  xp: number;
  rank: number;
  badgesCount: number;
}

export interface AccessibilitySettings {
  fontSize: 'small' | 'medium' | 'large';
  contrastMode: 'default' | 'high';
  reduceMotion: boolean;
  dyslexiaFriendlyFont: boolean;
}

export interface PersonalizedMission {
  id: string;
  title: string;
  description: string; // Generated by AI
  relatedWeakArea: string;
  suggestedAction: {
    type: 'complete_lesson' | 'take_challenge' | 'review_topic';
    resourceId?: string; // lessonId, challengeId, topicId
    details?: string;
  };
  reward: string; // e.g. "100 XP and a 'Persistence' badge"
}
